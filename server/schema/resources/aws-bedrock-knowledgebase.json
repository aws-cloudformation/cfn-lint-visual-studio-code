{
  "typeName": "AWS::Bedrock::KnowledgeBase",
  "description": "Definition of AWS::Bedrock::KnowledgeBase Resource Type",
  "definitions": {
    "KnowledgeBaseConfiguration": {
      "type": "object",
      "description": "Contains details about the embeddings model used for the knowledge base.",
      "properties": {
        "Type": {
          "$ref": "#/definitions/KnowledgeBaseType"
        },
        "VectorKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/VectorKnowledgeBaseConfiguration"
        },
        "KendraKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/KendraKnowledgeBaseConfiguration"
        },
        "SqlKnowledgeBaseConfiguration": {
          "$ref": "#/definitions/SqlKnowledgeBaseConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains details about the embeddings model used for the knowledge base.\n\n---\n\nRequired: No  \nUpdate requires: Replacement\n"
    },
    "KnowledgeBaseStatus": {
      "type": "string",
      "description": "The status of a knowledge base.",
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "UPDATING",
        "FAILED",
        "DELETE_UNSUCCESSFUL"
      ],
      "markdownDescription": "The status of a knowledge base.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: CREATING | ACTIVE | DELETING | UPDATING | FAILED | DELETE_UNSUCCESSFUL  \nUpdate requires: No interruption\n"
    },
    "KnowledgeBaseStorageType": {
      "type": "string",
      "description": "The storage type of a knowledge base.",
      "enum": [
        "OPENSEARCH_SERVERLESS",
        "PINECONE",
        "RDS",
        "MONGO_DB_ATLAS"
      ],
      "markdownDescription": "The storage type of a knowledge base.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: OPENSEARCH_SERVERLESS | PINECONE | RDS | MONGO_DB_ATLAS  \nUpdate requires: No interruption\n"
    },
    "KnowledgeBaseType": {
      "type": "string",
      "description": "The type of a knowledge base.",
      "enum": [
        "VECTOR",
        "KENDRA",
        "SQL"
      ],
      "markdownDescription": "The type of a knowledge base.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: VECTOR | KENDRA | SQL  \nUpdate requires: No interruption\n"
    },
    "OpenSearchServerlessConfiguration": {
      "type": "object",
      "description": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.",
      "properties": {
        "CollectionArn": {
          "type": "string",
          "maxLength": 2048,
          "description": "The ARN of the OpenSearch Service vector store.",
          "markdownDescription": "The ARN of the OpenSearch Service vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^arn:aws(|-cn|-us-gov|-iso):aoss:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:collection/[a-z0-9-]{3,32}$  \nUpdate requires: No interruption\n"
        },
        "VectorIndexName": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the vector store.",
          "markdownDescription": "The name of the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "FieldMapping": {
          "$ref": "#/definitions/OpenSearchServerlessFieldMapping"
        }
      },
      "required": [
        "CollectionArn",
        "FieldMapping",
        "VectorIndexName"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "OpenSearchServerlessFieldMapping": {
      "type": "object",
      "description": "A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names",
      "properties": {
        "VectorField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "TextField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "MetadataField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores metadata about the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "MetadataField",
        "TextField",
        "VectorField"
      ],
      "additionalProperties": false,
      "markdownDescription": "A mapping of Bedrock Knowledge Base fields to OpenSearch Serverless field names\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "PineconeConfiguration": {
      "type": "object",
      "description": "Contains the storage configuration of the knowledge base in Pinecone.",
      "properties": {
        "ConnectionString": {
          "type": "string",
          "maxLength": 2048,
          "description": "The endpoint URL for your index management page.",
          "markdownDescription": "The endpoint URL for your index management page.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "CredentialsSecretArn": {
          "type": "string",
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.",
          "markdownDescription": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$  \nUpdate requires: No interruption\n"
        },
        "Namespace": {
          "type": "string",
          "maxLength": 2048,
          "description": "The namespace to be used to write new data to your database.",
          "markdownDescription": "The namespace to be used to write new data to your database.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "FieldMapping": {
          "$ref": "#/definitions/PineconeFieldMapping"
        }
      },
      "required": [
        "ConnectionString",
        "CredentialsSecretArn",
        "FieldMapping"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the storage configuration of the knowledge base in Pinecone.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "PineconeFieldMapping": {
      "type": "object",
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "TextField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "MetadataField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores metadata about the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "MetadataField",
        "TextField"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the names of the fields to which to map information about the vector store.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RdsConfiguration": {
      "type": "object",
      "description": "Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.",
      "properties": {
        "ResourceArn": {
          "type": "string",
          "description": "The ARN of the vector store.",
          "markdownDescription": "The ARN of the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):rds:[a-zA-Z0-9-]*:[0-9]{12}:cluster:[a-zA-Z0-9-]{1,63}$  \nUpdate requires: No interruption\n"
        },
        "CredentialsSecretArn": {
          "type": "string",
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.",
          "markdownDescription": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$  \nUpdate requires: No interruption\n"
        },
        "DatabaseName": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of your Amazon RDS database.",
          "markdownDescription": "The name of your Amazon RDS database.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\-]+$  \nUpdate requires: No interruption\n"
        },
        "TableName": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of the table in the database.",
          "markdownDescription": "The name of the table in the database.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\.\\-]+$  \nUpdate requires: No interruption\n"
        },
        "FieldMapping": {
          "$ref": "#/definitions/RdsFieldMapping"
        }
      },
      "required": [
        "CredentialsSecretArn",
        "DatabaseName",
        "FieldMapping",
        "ResourceArn",
        "TableName"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RdsFieldMapping": {
      "type": "object",
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "PrimaryKeyField": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of the field in which Amazon Bedrock stores the ID for each entry.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the ID for each entry.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\-]+$  \nUpdate requires: No interruption\n"
        },
        "VectorField": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\-]+$  \nUpdate requires: No interruption\n"
        },
        "TextField": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\-]+$  \nUpdate requires: No interruption\n"
        },
        "MetadataField": {
          "type": "string",
          "maxLength": 63,
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores metadata about the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^[a-zA-Z0-9_\\-]+$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "MetadataField",
        "PrimaryKeyField",
        "TextField",
        "VectorField"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the names of the fields to which to map information about the vector store.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedisEnterpriseCloudConfiguration": {
      "type": "object",
      "description": "Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.",
      "properties": {
        "Endpoint": {
          "type": "string",
          "maxLength": 2048,
          "description": "The endpoint URL of the Redis Enterprise Cloud database.",
          "markdownDescription": "The endpoint URL of the Redis Enterprise Cloud database.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "VectorIndexName": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the vector index.",
          "markdownDescription": "The name of the vector index.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "CredentialsSecretArn": {
          "type": "string",
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.",
          "markdownDescription": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$  \nUpdate requires: No interruption\n"
        },
        "FieldMapping": {
          "$ref": "#/definitions/RedisEnterpriseCloudFieldMapping"
        }
      },
      "required": [
        "CredentialsSecretArn",
        "Endpoint",
        "FieldMapping",
        "VectorIndexName"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedisEnterpriseCloudFieldMapping": {
      "type": "object",
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "VectorField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "TextField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "MetadataField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores metadata about the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "MetadataField",
        "TextField",
        "VectorField"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the names of the fields to which to map information about the vector store.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "MongoDbAtlasFieldMapping": {
      "type": "object",
      "description": "Contains the names of the fields to which to map information about the vector store.",
      "properties": {
        "VectorField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "TextField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "MetadataField": {
          "type": "string",
          "maxLength": 2048,
          "description": "The name of the field in which Amazon Bedrock stores metadata about the vector store.",
          "markdownDescription": "The name of the field in which Amazon Bedrock stores metadata about the vector store.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "VectorField",
        "MetadataField",
        "TextField"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the names of the fields to which to map information about the vector store.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "MongoDbAtlasConfiguration": {
      "type": "object",
      "description": "Contains the storage configuration of the knowledge base in MongoDb Atlas Cloud.",
      "properties": {
        "Endpoint": {
          "type": "string",
          "maxLength": 2048,
          "description": "MongoDB Atlas endpoint.",
          "markdownDescription": "MongoDB Atlas endpoint.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+\\.mongodb\\.net$  \nUpdate requires: No interruption\n"
        },
        "CredentialsSecretArn": {
          "type": "string",
          "description": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon Mongo database.",
          "markdownDescription": "The ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon Mongo database.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$  \nUpdate requires: No interruption\n"
        },
        "DatabaseName": {
          "type": "string",
          "maxLength": 63,
          "description": "Name of the database within MongoDB Atlas.",
          "markdownDescription": "Name of the database within MongoDB Atlas.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "CollectionName": {
          "type": "string",
          "maxLength": 63,
          "description": "Name of the collection within MongoDB Atlas.",
          "markdownDescription": "Name of the collection within MongoDB Atlas.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 63  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "VectorIndexName": {
          "type": "string",
          "maxLength": 2048,
          "description": "Name of a MongoDB Atlas index.",
          "markdownDescription": "Name of a MongoDB Atlas index.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^.*$  \nUpdate requires: No interruption\n"
        },
        "EndpointServiceName": {
          "type": "string",
          "maxLength": 255,
          "description": "MongoDB Atlas endpoint service name.",
          "markdownDescription": "MongoDB Atlas endpoint service name.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 255  \nPattern: ^(?:arn:aws(?:-us-gov|-cn|-iso|-iso-[a-z])*:.+:.*:\\d+:.+/.+$|[a-zA-Z0-9*]+[a-zA-Z0-9._-]*)$  \nUpdate requires: No interruption\n"
        },
        "FieldMapping": {
          "$ref": "#/definitions/MongoDbAtlasFieldMapping"
        }
      },
      "required": [
        "Endpoint",
        "CredentialsSecretArn",
        "DatabaseName",
        "CollectionName",
        "VectorIndexName",
        "FieldMapping"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains the storage configuration of the knowledge base in MongoDb Atlas Cloud.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "StorageConfiguration": {
      "type": "object",
      "description": "The vector store service in which the knowledge base is stored.",
      "properties": {
        "Type": {
          "$ref": "#/definitions/KnowledgeBaseStorageType"
        },
        "OpensearchServerlessConfiguration": {
          "$ref": "#/definitions/OpenSearchServerlessConfiguration"
        },
        "PineconeConfiguration": {
          "$ref": "#/definitions/PineconeConfiguration"
        },
        "RdsConfiguration": {
          "$ref": "#/definitions/RdsConfiguration"
        },
        "MongoDbAtlasConfiguration": {
          "$ref": "#/definitions/MongoDbAtlasConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "oneOf": [
        {
          "required": [
            "OpensearchServerlessConfiguration"
          ]
        },
        {
          "required": [
            "PineconeConfiguration"
          ]
        },
        {
          "required": [
            "RdsConfiguration"
          ]
        },
        {
          "required": [
            "MongoDbAtlasConfiguration"
          ]
        }
      ],
      "additionalProperties": false,
      "markdownDescription": "The vector store service in which the knowledge base is stored.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "TagsMap": {
      "type": "object",
      "description": "A map of tag keys and values",
      "patternProperties": {
        "^[a-zA-Z0-9\\s._:/=+@-]*$": {
          "type": "string",
          "maxLength": 256,
          "minLength": 0,
          "description": "Value of a tag",
          "markdownDescription": "Value of a tag\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 256  \nPattern: ^[a-zA-Z0-9\\s._:/=+@-]*$  \nUpdate requires: No interruption\n"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "A map of tag keys and values\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "BedrockEmbeddingModelConfiguration": {
      "type": "object",
      "description": "The vector configuration details for the Bedrock embeddings model.",
      "properties": {
        "Dimensions": {
          "type": "integer",
          "maximum": 4096,
          "minimum": 0,
          "description": "The dimensions details for the vector configuration used on the Bedrock embeddings model.",
          "markdownDescription": "The dimensions details for the vector configuration used on the Bedrock embeddings model.\n\n---\n\nRequired: No  \nType: Integer  \nUpdate requires: No interruption\n"
        },
        "EmbeddingDataType": {
          "type": "string",
          "description": "The data type for the vectors when using a model to convert text into vector embeddings.",
          "enum": [
            "FLOAT32",
            "BINARY"
          ],
          "markdownDescription": "The data type for the vectors when using a model to convert text into vector embeddings.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: FLOAT32 | BINARY  \nUpdate requires: No interruption\n"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "The vector configuration details for the Bedrock embeddings model.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "EmbeddingModelConfiguration": {
      "type": "object",
      "description": "The embeddings model configuration details for the vector model used in Knowledge Base.",
      "properties": {
        "BedrockEmbeddingModelConfiguration": {
          "$ref": "#/definitions/BedrockEmbeddingModelConfiguration"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "The embeddings model configuration details for the vector model used in Knowledge Base.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "VectorKnowledgeBaseConfiguration": {
      "type": "object",
      "description": "Contains details about the model used to create vector embeddings for the knowledge base.",
      "properties": {
        "EmbeddingModelArn": {
          "type": "string",
          "maxLength": 2048,
          "minLength": 20,
          "description": "The ARN of the model used to create vector embeddings for the knowledge base.",
          "markdownDescription": "The ARN of the model used to create vector embeddings for the knowledge base.\n\n---\n\nRequired: Yes  \nType: String  \nMinimum Length: 20  \nMaximum Length: 2048  \nPattern: ^(arn:aws(-[^:]+)?:[a-z0-9-]+:[a-z0-9-]{1,20}:[0-9]{0,12}:[a-zA-Z0-9-:/._+]+)$  \nUpdate requires: No interruption\n"
        },
        "EmbeddingModelConfiguration": {
          "$ref": "#/definitions/EmbeddingModelConfiguration"
        },
        "SupplementalDataStorageConfiguration": {
          "$ref": "#/definitions/SupplementalDataStorageConfiguration"
        }
      },
      "required": [
        "EmbeddingModelArn"
      ],
      "additionalProperties": false,
      "markdownDescription": "Contains details about the model used to create vector embeddings for the knowledge base.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "S3Location": {
      "type": "object",
      "description": "An Amazon S3 location.",
      "properties": {
        "URI": {
          "type": "string",
          "maxLength": 2048,
          "minLength": 1,
          "description": "The location's URI",
          "markdownDescription": "The location's URI\n\n---\n\nRequired: Yes  \nType: String  \nMinimum Length: 1  \nMaximum Length: 2048  \nPattern: ^s3://.{1,128}$  \nUpdate requires: No interruption\n"
        }
      },
      "required": [
        "URI"
      ],
      "additionalProperties": false,
      "markdownDescription": "An Amazon S3 location.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "SupplementalDataStorageLocationType": {
      "type": "string",
      "description": "Supplemental data storage location type.",
      "enum": [
        "S3"
      ],
      "markdownDescription": "Supplemental data storage location type.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: S3  \nUpdate requires: No interruption\n"
    },
    "SupplementalDataStorageLocation": {
      "type": "object",
      "description": "Supplemental data storage location.",
      "properties": {
        "SupplementalDataStorageLocationType": {
          "$ref": "#/definitions/SupplementalDataStorageLocationType"
        },
        "S3Location": {
          "$ref": "#/definitions/S3Location"
        }
      },
      "required": [
        "SupplementalDataStorageLocationType"
      ],
      "additionalProperties": false,
      "markdownDescription": "Supplemental data storage location.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "SupplementalDataStorageLocations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/SupplementalDataStorageLocation"
      },
      "maxItems": 1,
      "minItems": 1,
      "description": "List of supplemental data storage locations.",
      "insertionOrder": false,
      "markdownDescription": "List of supplemental data storage locations.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "SupplementalDataStorageConfiguration": {
      "type": "object",
      "description": "Configurations for supplemental data storage.",
      "properties": {
        "SupplementalDataStorageLocations": {
          "$ref": "#/definitions/SupplementalDataStorageLocations"
        }
      },
      "required": [
        "SupplementalDataStorageLocations"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for supplemental data storage.\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "KendraKnowledgeBaseConfiguration": {
      "type": "object",
      "description": "Configurations for a Kendra knowledge base",
      "properties": {
        "KendraIndexArn": {
          "$ref": "#/definitions/KendraIndexArn"
        }
      },
      "required": [
        "KendraIndexArn"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for a Kendra knowledge base\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "KendraIndexArn": {
      "type": "string",
      "description": "Arn of a Kendra index",
      "markdownDescription": "Arn of a Kendra index\n\n---\n\nRequired: No  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):kendra:[a-z0-9-]{1,20}:([0-9]{12}|):index/([a-zA-Z0-9][a-zA-Z0-9-]{35}|[a-zA-Z0-9][a-zA-Z0-9-]{35}-[a-zA-Z0-9][a-zA-Z0-9-]{35})$  \nUpdate requires: No interruption\n"
    },
    "SqlKnowledgeBaseConfiguration": {
      "type": "object",
      "description": "Configurations for a SQL knowledge base",
      "properties": {
        "Type": {
          "$ref": "#/definitions/QueryEngineType"
        },
        "RedshiftConfiguration": {
          "$ref": "#/definitions/RedshiftConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for a SQL knowledge base\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "QueryEngineType": {
      "type": "string",
      "description": "SQL query engine type",
      "enum": [
        "REDSHIFT"
      ],
      "markdownDescription": "SQL query engine type\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: REDSHIFT  \nUpdate requires: No interruption\n"
    },
    "RedshiftConfiguration": {
      "type": "object",
      "description": "Configurations for a Redshift knowledge base",
      "properties": {
        "StorageConfigurations": {
          "$ref": "#/definitions/RedshiftQueryEngineStorageConfigurations"
        },
        "QueryEngineConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineConfiguration"
        },
        "QueryGenerationConfiguration": {
          "$ref": "#/definitions/QueryGenerationConfiguration"
        }
      },
      "required": [
        "StorageConfigurations",
        "QueryEngineConfiguration"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for a Redshift knowledge base\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineStorageConfigurations": {
      "type": "array",
      "description": "List of configurations for available Redshift query engine storage types",
      "minItems": 1,
      "maxItems": 1,
      "items": {
        "$ref": "#/definitions/RedshiftQueryEngineStorageConfiguration"
      },
      "insertionOrder": false,
      "markdownDescription": "List of configurations for available Redshift query engine storage types\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineStorageConfiguration": {
      "type": "object",
      "description": "Configurations for available Redshift query engine storage types",
      "properties": {
        "Type": {
          "$ref": "#/definitions/RedshiftQueryEngineStorageType"
        },
        "AwsDataCatalogConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineAwsDataCatalogStorageConfiguration"
        },
        "RedshiftConfiguration": {
          "$ref": "#/definitions/RedshiftQueryEngineRedshiftStorageConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for available Redshift query engine storage types\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineStorageType": {
      "type": "string",
      "description": "Redshift query engine storage type",
      "enum": [
        "REDSHIFT",
        "AWS_DATA_CATALOG"
      ],
      "markdownDescription": "Redshift query engine storage type\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: REDSHIFT | AWS_DATA_CATALOG  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineAwsDataCatalogStorageConfiguration": {
      "type": "object",
      "description": "Configurations for Redshift query engine AWS Data Catalog backed storage",
      "properties": {
        "TableNames": {
          "$ref": "#/definitions/AwsDataCatalogTableNames"
        }
      },
      "required": [
        "TableNames"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for Redshift query engine AWS Data Catalog backed storage\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "AwsDataCatalogTableNames": {
      "type": "array",
      "description": "List of table names in AWS Data Catalog. Must follow two part notation",
      "items": {
        "$ref": "#/definitions/AwsDataCatalogTableName"
      },
      "minItems": 1,
      "maxItems": 1000,
      "insertionOrder": false,
      "markdownDescription": "List of table names in AWS Data Catalog. Must follow two part notation\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "AwsDataCatalogTableName": {
      "type": "string",
      "description": "AWS Data Catalog table name",
      "minLength": 1,
      "maxLength": 200,
      "markdownDescription": "AWS Data Catalog table name\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 200  \nPattern: ^.*\\.*$  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineRedshiftStorageConfiguration": {
      "type": "object",
      "description": "Configurations for Redshift query engine Redshift backed storage",
      "properties": {
        "DatabaseName": {
          "$ref": "#/definitions/RedshiftDatabase"
        }
      },
      "required": [
        "DatabaseName"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for Redshift query engine Redshift backed storage\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftDatabase": {
      "type": "string",
      "description": "Redshift database name",
      "minLength": 1,
      "maxLength": 200,
      "markdownDescription": "Redshift database name\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 200  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineConfiguration": {
      "type": "object",
      "description": "Configurations for Redshift query engine",
      "properties": {
        "Type": {
          "$ref": "#/definitions/RedshiftQueryEngineType"
        },
        "ServerlessConfiguration": {
          "$ref": "#/definitions/RedshiftServerlessConfiguration"
        },
        "ProvisionedConfiguration": {
          "$ref": "#/definitions/RedshiftProvisionedConfiguration"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for Redshift query engine\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftQueryEngineType": {
      "type": "string",
      "description": "Redshift query engine type",
      "enum": [
        "SERVERLESS",
        "PROVISIONED"
      ],
      "markdownDescription": "Redshift query engine type\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: SERVERLESS | PROVISIONED  \nUpdate requires: No interruption\n"
    },
    "RedshiftServerlessConfiguration": {
      "type": "object",
      "description": "Configurations for serverless Redshift query engine",
      "properties": {
        "WorkgroupArn": {
          "$ref": "#/definitions/WorkgroupArn"
        },
        "AuthConfiguration": {
          "$ref": "#/definitions/RedshiftServerlessAuthConfiguration"
        }
      },
      "required": [
        "WorkgroupArn",
        "AuthConfiguration"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for serverless Redshift query engine\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "WorkgroupArn": {
      "type": "string",
      "description": "Workgroup arn",
      "markdownDescription": "Workgroup arn\n\n---\n\nRequired: No  \nType: String  \nPattern: ^(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})$  \nUpdate requires: No interruption\n"
    },
    "RedshiftServerlessAuthConfiguration": {
      "type": "object",
      "description": "Configurations for Redshift query engine serverless auth setup",
      "properties": {
        "Type": {
          "$ref": "#/definitions/RedshiftServerlessAuthType"
        },
        "UsernamePasswordSecretArn": {
          "$ref": "#/definitions/SecretArn"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for Redshift query engine serverless auth setup\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftServerlessAuthType": {
      "type": "string",
      "description": "Serverless Redshift auth type",
      "enum": [
        "IAM",
        "USERNAME_PASSWORD"
      ],
      "markdownDescription": "Serverless Redshift auth type\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: IAM | USERNAME_PASSWORD  \nUpdate requires: No interruption\n"
    },
    "SecretArn": {
      "type": "string",
      "description": "Arn of a SecretsManager Secret",
      "markdownDescription": "Arn of a SecretsManager Secret\n\n---\n\nRequired: No  \nType: String  \nPattern: ^arn:aws(|-cn|-us-gov):secretsmanager:[a-z0-9-]{1,20}:([0-9]{12}|):secret:[a-zA-Z0-9!/_+=.@-]{1,512}$  \nUpdate requires: No interruption\n"
    },
    "RedshiftProvisionedConfiguration": {
      "type": "object",
      "description": "Configurations for provisioned Redshift query engine",
      "properties": {
        "ClusterIdentifier": {
          "$ref": "#/definitions/RedshiftClusterIdentifier"
        },
        "AuthConfiguration": {
          "$ref": "#/definitions/RedshiftProvisionedAuthConfiguration"
        }
      },
      "required": [
        "ClusterIdentifier",
        "AuthConfiguration"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for provisioned Redshift query engine\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftClusterIdentifier": {
      "type": "string",
      "description": "Redshift cluster identifier",
      "minLength": 1,
      "maxLength": 63,
      "markdownDescription": "Redshift cluster identifier\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 63  \nUpdate requires: No interruption\n"
    },
    "RedshiftProvisionedAuthConfiguration": {
      "type": "object",
      "description": "Configurations for Redshift query engine provisioned auth setup",
      "properties": {
        "Type": {
          "$ref": "#/definitions/RedshiftProvisionedAuthType"
        },
        "DatabaseUser": {
          "type": "string",
          "description": "Redshift database user",
          "markdownDescription": "Redshift database user\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption\n"
        },
        "UsernamePasswordSecretArn": {
          "$ref": "#/definitions/SecretArn"
        }
      },
      "required": [
        "Type"
      ],
      "additionalProperties": false,
      "markdownDescription": "Configurations for Redshift query engine provisioned auth setup\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "RedshiftProvisionedAuthType": {
      "type": "string",
      "description": "Provisioned Redshift auth type",
      "enum": [
        "IAM",
        "USERNAME_PASSWORD",
        "USERNAME"
      ],
      "markdownDescription": "Provisioned Redshift auth type\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: IAM | USERNAME_PASSWORD | USERNAME  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationConfiguration": {
      "type": "object",
      "description": "Configurations for generating Redshift engine queries",
      "properties": {
        "ExecutionTimeoutSeconds": {
          "$ref": "#/definitions/QueryExecutionTimeoutSeconds"
        },
        "GenerationContext": {
          "$ref": "#/definitions/QueryGenerationContext"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Configurations for generating Redshift engine queries\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "QueryExecutionTimeoutSeconds": {
      "type": "integer",
      "description": "Max query execution timeout",
      "minimum": 1,
      "maximum": 200,
      "markdownDescription": "Max query execution timeout\n\n---\n\nRequired: No  \nType: Integer  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationContext": {
      "type": "object",
      "description": "Context used to improve query generation",
      "properties": {
        "Tables": {
          "$ref": "#/definitions/QueryGenerationTables"
        },
        "CuratedQueries": {
          "$ref": "#/definitions/CuratedQueries"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Context used to improve query generation\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationTables": {
      "type": "array",
      "description": "List of tables used for Redshift query generation context",
      "items": {
        "$ref": "#/definitions/QueryGenerationTable"
      },
      "maxItems": 50,
      "insertionOrder": false,
      "markdownDescription": "List of tables used for Redshift query generation context\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationTable": {
      "type": "object",
      "description": "Tables used for Redshift query generation context",
      "properties": {
        "Name": {
          "$ref": "#/definitions/QueryGenerationTableName"
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString"
        },
        "Inclusion": {
          "$ref": "#/definitions/InclusionType"
        },
        "Columns": {
          "$ref": "#/definitions/QueryGenerationColumns"
        }
      },
      "required": [
        "Name"
      ],
      "additionalProperties": false,
      "markdownDescription": "Tables used for Redshift query generation context\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationTableName": {
      "type": "string",
      "description": "Query generation table name. Must follow three-part notation",
      "markdownDescription": "Query generation table name. Must follow three-part notation\n\n---\n\nRequired: No  \nType: String  \nPattern: ^.*\\..*\\..*$  \nUpdate requires: No interruption\n"
    },
    "DescriptionString": {
      "type": "string",
      "description": "Description for the attached entity",
      "minLength": 1,
      "maxLength": 200,
      "markdownDescription": "Description for the attached entity\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 200  \nUpdate requires: No interruption\n"
    },
    "InclusionType": {
      "type": "string",
      "description": "Include or Exclude status for an entity",
      "enum": [
        "INCLUDE",
        "EXCLUDE"
      ],
      "markdownDescription": "Include or Exclude status for an entity\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: INCLUDE | EXCLUDE  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationColumns": {
      "type": "array",
      "description": "List of Redshift query generation columns",
      "items": {
        "$ref": "#/definitions/QueryGenerationColumn"
      },
      "insertionOrder": false,
      "markdownDescription": "List of Redshift query generation columns\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationColumn": {
      "type": "object",
      "description": "Redshift query generation column",
      "properties": {
        "Name": {
          "$ref": "#/definitions/QueryGenerationColumnName"
        },
        "Description": {
          "$ref": "#/definitions/DescriptionString"
        },
        "Inclusion": {
          "$ref": "#/definitions/InclusionType"
        }
      },
      "additionalProperties": false,
      "markdownDescription": "Redshift query generation column\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "QueryGenerationColumnName": {
      "type": "string",
      "description": "Query generation column name",
      "minLength": 1,
      "maxLength": 127,
      "markdownDescription": "Query generation column name\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 127  \nUpdate requires: No interruption\n"
    },
    "CuratedQueries": {
      "type": "array",
      "description": "List of example queries and results",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/CuratedQuery"
      },
      "insertionOrder": false,
      "markdownDescription": "List of example queries and results\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\n"
    },
    "CuratedQuery": {
      "type": "object",
      "description": "Curated query or question and answer pair",
      "properties": {
        "NaturalLanguage": {
          "$ref": "#/definitions/NaturalLanguageString"
        },
        "Sql": {
          "$ref": "#/definitions/SqlString"
        }
      },
      "required": [
        "NaturalLanguage",
        "Sql"
      ],
      "additionalProperties": false,
      "markdownDescription": "Curated query or question and answer pair\n\n---\n\nRequired: No  \nUpdate requires: No interruption\n"
    },
    "NaturalLanguageString": {
      "type": "string",
      "description": "Question for the curated query",
      "minLength": 1,
      "maxLength": 1000,
      "markdownDescription": "Question for the curated query\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 1000  \nUpdate requires: No interruption\n"
    },
    "SqlString": {
      "type": "string",
      "description": "Answer for the curated query",
      "minLength": 1,
      "maxLength": 1000,
      "markdownDescription": "Answer for the curated query\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 1000  \nUpdate requires: No interruption\n"
    }
  },
  "properties": {
    "Description": {
      "type": "string",
      "maxLength": 200,
      "minLength": 1,
      "description": "Description of the Resource.",
      "markdownDescription": "Description of the Resource.\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 200  \nUpdate requires: No interruption\n"
    },
    "KnowledgeBaseConfiguration": {
      "$ref": "#/definitions/KnowledgeBaseConfiguration"
    },
    "KnowledgeBaseId": {
      "type": "string",
      "description": "The unique identifier of the knowledge base.",
      "markdownDescription": "The unique identifier of the knowledge base.\n\n---\n\nRequired: No  \nType: String  \nPattern: ^[0-9a-zA-Z]{10}$  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "KnowledgeBaseArn": {
      "type": "string",
      "maxLength": 128,
      "minLength": 0,
      "description": "The ARN of the knowledge base.",
      "markdownDescription": "The ARN of the knowledge base.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 128  \nPattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "Name": {
      "type": "string",
      "description": "The name of the knowledge base.",
      "markdownDescription": "The name of the knowledge base.\n\n---\n\nRequired: Yes  \nType: String  \nPattern: ^([0-9a-zA-Z][_-]?){1,100}$  \nUpdate requires: No interruption\n"
    },
    "Status": {
      "$ref": "#/definitions/KnowledgeBaseStatus"
    },
    "RoleArn": {
      "type": "string",
      "maxLength": 2048,
      "description": "The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_",
      "markdownDescription": "The ARN of the IAM role with permissions to invoke API operations on the knowledge base. The ARN must begin with AmazonBedrockExecutionRoleForKnowledgeBase_\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 2048  \nPattern: ^arn:aws(-[^:]+)?:iam::([0-9]{12})?:role/.+$  \nUpdate requires: No interruption\n"
    },
    "CreatedAt": {
      "type": "string",
      "description": "The time at which the knowledge base was created.",
      "markdownDescription": "The time at which the knowledge base was created.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "FailureReasons": {
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 2048,
        "description": "Failure Reason for Error.",
        "markdownDescription": "Failure Reason for Error.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 2048  \nUpdate requires: No interruption\n"
      },
      "maxItems": 2048,
      "description": "A list of reasons that the API operation on the knowledge base failed.",
      "insertionOrder": false,
      "markdownDescription": "A list of reasons that the API operation on the knowledge base failed.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "UpdatedAt": {
      "type": "string",
      "description": "The time at which the knowledge base was last updated.",
      "markdownDescription": "The time at which the knowledge base was last updated.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "StorageConfiguration": {
      "$ref": "#/definitions/StorageConfiguration"
    },
    "Tags": {
      "$ref": "#/definitions/TagsMap"
    }
  },
  "required": [
    "KnowledgeBaseConfiguration",
    "Name",
    "RoleArn"
  ],
  "readOnlyProperties": [
    "/properties/KnowledgeBaseId",
    "/properties/KnowledgeBaseArn",
    "/properties/CreatedAt",
    "/properties/UpdatedAt",
    "/properties/FailureReasons",
    "/properties/Status"
  ],
  "createOnlyProperties": [
    "/properties/StorageConfiguration",
    "/properties/KnowledgeBaseConfiguration/Type",
    "/properties/KnowledgeBaseConfiguration/VectorKnowledgeBaseConfiguration",
    "/properties/KnowledgeBaseConfiguration/KendraKnowledgeBaseConfiguration",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/Type",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/RedshiftConfiguration/StorageConfigurations",
    "/properties/KnowledgeBaseConfiguration/SqlKnowledgeBaseConfiguration/RedshiftConfiguration/QueryEngineConfiguration"
  ],
  "primaryIdentifier": [
    "/properties/KnowledgeBaseId"
  ],
  "handlers": {
    "create": {
      "permissions": [
        "bedrock:CreateKnowledgeBase",
        "bedrock:GetKnowledgeBase",
        "bedrock:TagResource",
        "bedrock:ListTagsForResource",
        "bedrock:AssociateThirdPartyKnowledgeBase",
        "iam:PassRole"
      ]
    },
    "read": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:ListTagsForResource"
      ]
    },
    "update": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:UpdateKnowledgeBase",
        "bedrock:TagResource",
        "bedrock:UntagResource",
        "bedrock:ListTagsForResource",
        "bedrock:AssociateThirdPartyKnowledgeBase",
        "iam:PassRole"
      ]
    },
    "delete": {
      "permissions": [
        "bedrock:GetKnowledgeBase",
        "bedrock:DeleteKnowledgeBase",
        "bedrock:ListDataSources"
      ]
    },
    "list": {
      "permissions": [
        "bedrock:ListKnowledgeBases"
      ]
    }
  },
  "tagging": {
    "cloudFormationSystemTags": true,
    "tagOnCreate": true,
    "tagProperty": "/properties/Tags",
    "tagUpdatable": true,
    "taggable": true
  },
  "additionalProperties": false,
  "attributes": {
    "KnowledgeBaseId": {
      "type": "string",
      "description": "The unique identifier of the knowledge base.",
      "markdownDescription": "The unique identifier of the knowledge base.\n\n---\n\nRequired: No  \nType: String  \nPattern: ^[0-9a-zA-Z]{10}$  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "KnowledgeBaseArn": {
      "type": "string",
      "maxLength": 128,
      "minLength": 0,
      "description": "The ARN of the knowledge base.",
      "markdownDescription": "The ARN of the knowledge base.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 128  \nPattern: ^arn:aws(|-cn|-us-gov):bedrock:[a-zA-Z0-9-]*:[0-9]{12}:knowledge-base/[0-9a-zA-Z]+$  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "Status": {
      "$ref": "#/definitions/KnowledgeBaseStatus"
    },
    "CreatedAt": {
      "type": "string",
      "description": "The time at which the knowledge base was created.",
      "markdownDescription": "The time at which the knowledge base was created.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "FailureReasons": {
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 2048,
        "description": "Failure Reason for Error.",
        "markdownDescription": "Failure Reason for Error.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 2048  \nUpdate requires: No interruption\n"
      },
      "maxItems": 2048,
      "description": "A list of reasons that the API operation on the knowledge base failed.",
      "insertionOrder": false,
      "markdownDescription": "A list of reasons that the API operation on the knowledge base failed.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption\nRead only property: Yes"
    },
    "UpdatedAt": {
      "type": "string",
      "description": "The time at which the knowledge base was last updated.",
      "markdownDescription": "The time at which the knowledge base was last updated.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption\nRead only property: Yes"
    }
  }
}