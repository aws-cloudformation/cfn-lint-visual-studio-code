{
  "typeName": "AWS::HealthLake::FHIRDatastore",
  "description": "HealthLake FHIR Datastore",
  "documentationUrl": "https://docs.aws.amazon.com/healthlake/latest/devguide/working-with-FHIR-healthlake.html",
  "definitions": {
    "CreatedAt": {
      "description": "The time that a Data Store was created.",
      "type": "object",
      "properties": {
        "Seconds": {
          "description": "Seconds since epoch.",
          "type": "string",
          "markdownDescription": "Seconds since epoch.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Nanos": {
          "description": "Nanoseconds.",
          "type": "integer",
          "markdownDescription": "Nanoseconds.\n\n---\n\nRequired: Yes  \nType: Integer  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Seconds",
        "Nanos"
      ],
      "additionalProperties": false,
      "markdownDescription": "The time that a Data Store was created.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "DatastoreArn": {
      "description": "The Amazon Resource Name used in the creation of the Data Store.",
      "type": "string",
      "markdownDescription": "The Amazon Resource Name used in the creation of the Data Store.\n\n---\n\nRequired: No  \nType: String  \nPattern: ^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?  \nUpdate requires: No interruption"
    },
    "DatastoreEndpoint": {
      "description": "The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.",
      "type": "string",
      "maxLength": 10000,
      "markdownDescription": "The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.\n\n---\n\nRequired: No  \nType: String  \nMaximum Length: 10000  \nUpdate requires: No interruption"
    },
    "DatastoreId": {
      "description": "The AWS-generated ID number for the Data Store.",
      "type": "string",
      "minLength": 1,
      "maxLength": 32,
      "markdownDescription": "The AWS-generated ID number for the Data Store.\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 32  \nUpdate requires: No interruption"
    },
    "DatastoreName": {
      "description": "The user-generated name for the Data Store.",
      "type": "string",
      "minLength": 1,
      "maxLength": 256,
      "markdownDescription": "The user-generated name for the Data Store.\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 256  \nUpdate requires: No interruption"
    },
    "DatastoreStatus": {
      "description": "The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.",
      "type": "string",
      "enum": [
        "CREATING",
        "ACTIVE",
        "DELETING",
        "DELETED"
      ],
      "markdownDescription": "The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: CREATING | ACTIVE | DELETING | DELETED  \nUpdate requires: No interruption"
    },
    "DatastoreTypeVersion": {
      "description": "The FHIR version. Only R4 version data is supported.",
      "type": "string",
      "enum": [
        "R4"
      ],
      "markdownDescription": "The FHIR version. Only R4 version data is supported.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: R4  \nUpdate requires: No interruption"
    },
    "PreloadDataConfig": {
      "description": "The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.",
      "type": "object",
      "properties": {
        "PreloadDataType": {
          "description": "The type of preloaded data. Only Synthea preloaded data is supported.",
          "type": "string",
          "enum": [
            "SYNTHEA"
          ],
          "markdownDescription": "The type of preloaded data. Only Synthea preloaded data is supported.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: SYNTHEA  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "PreloadDataType"
      ],
      "additionalProperties": false,
      "markdownDescription": "The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "SseConfiguration": {
      "description": "The server-side encryption key configuration for a customer provided encryption key.",
      "type": "object",
      "properties": {
        "KmsEncryptionConfig": {
          "$ref": "#/definitions/KmsEncryptionConfig"
        }
      },
      "required": [
        "KmsEncryptionConfig"
      ],
      "additionalProperties": false,
      "markdownDescription": "The server-side encryption key configuration for a customer provided encryption key.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "KmsEncryptionConfig": {
      "description": "The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.",
      "type": "object",
      "properties": {
        "CmkType": {
          "description": "The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.",
          "type": "string",
          "enum": [
            "CUSTOMER_MANAGED_KMS_KEY",
            "AWS_OWNED_KMS_KEY"
          ],
          "markdownDescription": "The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: CUSTOMER_MANAGED_KMS_KEY | AWS_OWNED_KMS_KEY  \nUpdate requires: No interruption"
        },
        "KmsKeyId": {
          "description": "The KMS encryption key id/alias used to encrypt the Data Store contents at rest.",
          "type": "string",
          "minLength": 1,
          "maxLength": 400,
          "markdownDescription": "The KMS encryption key id/alias used to encrypt the Data Store contents at rest.\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 1  \nMaximum Length: 400  \nPattern: (arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\\d:)?(\\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "CmkType"
      ],
      "additionalProperties": false,
      "markdownDescription": "The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "IdentityProviderConfiguration": {
      "description": "The identity provider configuration for the datastore",
      "type": "object",
      "properties": {
        "AuthorizationStrategy": {
          "description": "Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.",
          "type": "string",
          "enum": [
            "SMART_ON_FHIR_V1",
            "AWS_AUTH"
          ],
          "markdownDescription": "Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: SMART_ON_FHIR_V1 | AWS_AUTH  \nUpdate requires: No interruption"
        },
        "FineGrainedAuthorizationEnabled": {
          "description": "Flag to indicate if fine-grained authorization will be enabled for the datastore",
          "type": "boolean",
          "markdownDescription": "Flag to indicate if fine-grained authorization will be enabled for the datastore\n\n---\n\nRequired: No  \nType: Boolean  \nUpdate requires: No interruption"
        },
        "Metadata": {
          "description": "The JSON metadata elements for identity provider configuration.",
          "type": "string",
          "markdownDescription": "The JSON metadata elements for identity provider configuration.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "IdpLambdaArn": {
          "description": "The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.",
          "type": "string",
          "minLength": 49,
          "maxLength": 256,
          "markdownDescription": "The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server.\n\n---\n\nRequired: No  \nType: String  \nMinimum Length: 49  \nMaximum Length: 256  \nPattern: arn:aws[-a-z]*:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "AuthorizationStrategy"
      ],
      "additionalProperties": false,
      "markdownDescription": "The identity provider configuration for the datastore\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "Tag": {
      "description": "A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.",
      "type": "object",
      "properties": {
        "Key": {
          "description": "The key of the tag.",
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "markdownDescription": "The key of the tag.\n\n---\n\nRequired: Yes  \nType: String  \nMinimum Length: 1  \nMaximum Length: 128  \nUpdate requires: No interruption"
        },
        "Value": {
          "description": "The value of the tag.",
          "type": "string",
          "minLength": 0,
          "maxLength": 256,
          "markdownDescription": "The value of the tag.\n\n---\n\nRequired: Yes  \nType: String  \nMaximum Length: 256  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "additionalProperties": false,
      "markdownDescription": "A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    }
  },
  "properties": {
    "DatastoreName": {
      "$ref": "#/definitions/DatastoreName"
    },
    "DatastoreTypeVersion": {
      "$ref": "#/definitions/DatastoreTypeVersion"
    },
    "PreloadDataConfig": {
      "$ref": "#/definitions/PreloadDataConfig"
    },
    "SseConfiguration": {
      "$ref": "#/definitions/SseConfiguration"
    },
    "IdentityProviderConfiguration": {
      "$ref": "#/definitions/IdentityProviderConfiguration"
    },
    "Tags": {
      "type": "array",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    }
  },
  "additionalProperties": false,
  "taggable": true,
  "required": [
    "DatastoreTypeVersion"
  ],
  "readOnlyProperties": [
    "/properties/CreatedAt",
    "/properties/DatastoreArn",
    "/properties/DatastoreEndpoint",
    "/properties/DatastoreId",
    "/properties/DatastoreStatus"
  ],
  "primaryIdentifier": [
    "/properties/DatastoreId"
  ],
  "createOnlyProperties": [
    "/properties/DatastoreName",
    "/properties/DatastoreTypeVersion",
    "/properties/PreloadDataConfig",
    "/properties/SseConfiguration",
    "/properties/KmsEncryptionConfig",
    "/properties/IdentityProviderConfiguration"
  ],
  "handlers": {
    "create": {
      "permissions": [
        "healthlake:CreateFHIRDatastore",
        "healthlake:DescribeFHIRDatastore",
        "iam:PassRole",
        "kms:DescribeKey",
        "kms:CreateGrant",
        "kms:GenerateDataKey",
        "kms:Decrypt",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole",
        "ram:GetResourceShareInvitations",
        "ram:AcceptResourceShareInvitation",
        "glue:CreateDatabase",
        "glue:DeleteDatabase",
        "lambda:InvokeFunction",
        "healthlake:TagResource",
        "healthlake:UntagResource",
        "healthlake:ListTagsForResource"
      ]
    },
    "read": {
      "permissions": [
        "healthlake:DescribeFHIRDatastore",
        "healthlake:ListTagsForResource"
      ]
    },
    "update": {
      "permissions": [
        "healthlake:TagResource",
        "healthlake:UntagResource",
        "healthlake:ListTagsForResource",
        "healthlake:DescribeFHIRDatastore",
        "iam:PassRole",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole"
      ]
    },
    "delete": {
      "permissions": [
        "healthlake:DeleteFHIRDatastore",
        "healthlake:DescribeFHIRDatastore",
        "iam:PassRole",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole",
        "ram:GetResourceShareInvitations",
        "ram:AcceptResourceShareInvitation",
        "glue:CreateDatabase",
        "glue:DeleteDatabase"
      ]
    },
    "list": {
      "permissions": [
        "healthlake:ListFHIRDatastores"
      ]
    }
  },
  "attributes": {
    "CreatedAt": {
      "$ref": "#/definitions/CreatedAt"
    },
    "DatastoreArn": {
      "$ref": "#/definitions/DatastoreArn"
    },
    "DatastoreEndpoint": {
      "$ref": "#/definitions/DatastoreEndpoint"
    },
    "DatastoreId": {
      "$ref": "#/definitions/DatastoreId"
    },
    "DatastoreStatus": {
      "$ref": "#/definitions/DatastoreStatus"
    }
  }
}