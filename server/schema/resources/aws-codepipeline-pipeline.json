{
  "typeName": "AWS::CodePipeline::Pipeline",
  "description": "The AWS::CodePipeline::Pipeline resource creates a CodePipeline pipeline that describes how software changes go through a release process.",
  "sourceUrl": "https://github.com/aws-cloudformation/aws-cloudformation-resource-providers-codepipeline",
  "definitions": {
    "BlockerDeclaration": {
      "description": "Reserved for future use.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "description": "Reserved for future use.",
          "type": "string",
          "markdownDescription": "Reserved for future use.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Type": {
          "description": "Reserved for future use.",
          "type": "string",
          "enum": [
            "Schedule"
          ],
          "markdownDescription": "Reserved for future use.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: Schedule  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Type",
        "Name"
      ],
      "markdownDescription": "Reserved for future use.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitConfiguration": {
      "description": "A type of trigger configuration for Git-based source actions.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Push": {
          "description": "The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/GitPushFilter"
          },
          "markdownDescription": "The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "SourceActionName": {
          "description": "The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.",
          "type": "string",
          "markdownDescription": "The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "PullRequest": {
          "description": "The field where the repository event that will start the pipeline is specified as pull requests.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/GitPullRequestFilter"
          },
          "markdownDescription": "The field where the repository event that will start the pipeline is specified as pull requests.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "SourceActionName"
      ],
      "markdownDescription": "A type of trigger configuration for Git-based source actions.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "ActionTypeId": {
      "description": "Represents information about an action type.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Owner": {
          "description": "The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom.",
          "type": "string",
          "markdownDescription": "The creator of the action being called. There are three valid values for the Owner field in the action category section within your pipeline structure: AWS, ThirdParty, and Custom.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Category": {
          "description": "A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.",
          "type": "string",
          "enum": [
            "Source",
            "Build",
            "Test",
            "Deploy",
            "Invoke",
            "Approval"
          ],
          "markdownDescription": "A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the values below.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: Source | Build | Test | Deploy | Invoke | Approval  \nUpdate requires: No interruption"
        },
        "Version": {
          "description": "A string that describes the action version.",
          "type": "string",
          "markdownDescription": "A string that describes the action version.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Provider": {
          "description": "The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy.",
          "type": "string",
          "markdownDescription": "The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as CodeDeploy.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Owner",
        "Category",
        "Version",
        "Provider"
      ],
      "markdownDescription": "Represents information about an action type.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "ArtifactStoreMap": {
      "description": "A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ArtifactStore": {
          "$ref": "#/definitions/ArtifactStore"
        },
        "Region": {
          "description": "The action declaration's AWS Region, such as us-east-1.",
          "type": "string",
          "markdownDescription": "The action declaration's AWS Region, such as us-east-1.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "ArtifactStore",
        "Region"
      ],
      "markdownDescription": "A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "PipelineTriggerDeclaration": {
      "description": "Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "GitConfiguration": {
          "$ref": "#/definitions/GitConfiguration"
        },
        "ProviderType": {
          "description": "The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.",
          "type": "string",
          "enum": [
            "CodeStarSourceConnection"
          ],
          "markdownDescription": "The source provider for the event, such as connections configured for a repository with Git tags, for the specified trigger configuration.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: CodeStarSourceConnection  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "ProviderType"
      ],
      "markdownDescription": "Represents information about the specified trigger configuration, such as the filter criteria and the source stage for the action that contains the trigger.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "EncryptionKey": {
      "description": "Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Type": {
          "description": "The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.",
          "type": "string",
          "markdownDescription": "The type of encryption key, such as an AWS KMS key. When creating or updating a pipeline, the value must be set to 'KMS'.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Id": {
          "description": "The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.",
          "type": "string",
          "markdownDescription": "The ID used to identify the key. For an AWS KMS key, you can use the key ID, the key ARN, or the alias ARN.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Type",
        "Id"
      ],
      "markdownDescription": "Represents information about the key used to encrypt data in the artifact store, such as an AWS Key Management Service (AWS KMS) key\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitPullRequestFilter": {
      "description": "The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FilePaths": {
          "$ref": "#/definitions/GitFilePathFilterCriteria"
        },
        "Events": {
          "description": "The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The field that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Branches": {
          "$ref": "#/definitions/GitBranchFilterCriteria"
        }
      },
      "markdownDescription": "The event criteria for the pull request trigger configuration, such as the lists of branches or file paths to include and exclude.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitPushFilter": {
      "description": "The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "FilePaths": {
          "$ref": "#/definitions/GitFilePathFilterCriteria"
        },
        "Branches": {
          "$ref": "#/definitions/GitBranchFilterCriteria"
        },
        "Tags": {
          "$ref": "#/definitions/GitTagFilterCriteria"
        }
      },
      "markdownDescription": "The event criteria that specify when a specified repository event will start the pipeline for the specified trigger configuration, such as the lists of Git tags to include and exclude.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "ActionDeclaration": {
      "description": "Represents information about an action declaration.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "ActionTypeId": {
          "$ref": "#/definitions/ActionTypeId"
        },
        "Configuration": {
          "description": "The action's configuration. These are key-value pairs that specify input values for an action.",
          "type": "object",
          "markdownDescription": "The action's configuration. These are key-value pairs that specify input values for an action.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
        },
        "InputArtifacts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/InputArtifact"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "OutputArtifacts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/OutputArtifact"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Region": {
          "description": "The action declaration's AWS Region, such as us-east-1.",
          "type": "string",
          "markdownDescription": "The action declaration's AWS Region, such as us-east-1.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Namespace": {
          "description": "The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.",
          "type": "string",
          "markdownDescription": "The variable namespace associated with the action. All variables produced as output by this action fall under this namespace.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "RoleArn": {
          "description": "The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.",
          "type": "string",
          "markdownDescription": "The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline.\n\n---\n\nRequired: No  \nType: String  \nPattern: arn:aws(-[\\w]+)*:iam::[0-9]{12}:role/.*  \nUpdate requires: No interruption"
        },
        "RunOrder": {
          "description": "The order in which actions are run.",
          "type": "integer",
          "markdownDescription": "The order in which actions are run.\n\n---\n\nRequired: No  \nType: Integer  \nUpdate requires: No interruption"
        },
        "Name": {
          "description": "The action declaration's name.",
          "type": "string",
          "markdownDescription": "The action declaration's name.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "TimeoutInMinutes": {
          "description": "A timeout duration in minutes that can be applied against the ActionType\u2019s default timeout value specified in Quotas for AWS CodePipeline. This attribute is available only to the manual approval ActionType.",
          "type": "integer",
          "markdownDescription": "A timeout duration in minutes that can be applied against the ActionType\u2019s default timeout value specified in Quotas for AWS CodePipeline. This attribute is available only to the manual approval ActionType.\n\n---\n\nRequired: No  \nType: Integer  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "ActionTypeId",
        "Name"
      ],
      "markdownDescription": "Represents information about an action declaration.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitFilePathFilterCriteria": {
      "description": "The Git repository file paths specified as filter criteria to start the pipeline.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Includes": {
          "description": "The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git repository file paths that, when a commit is pushed, are to be included as criteria that starts the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Excludes": {
          "description": "The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git repository file paths that, when a commit is pushed, are to be excluded from starting the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The Git repository file paths specified as filter criteria to start the pipeline.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "StageDeclaration": {
      "description": "Represents information about a stage and its definition.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Blockers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/BlockerDeclaration"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Actions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ActionDeclaration"
          },
          "markdownDescription": "\n\n---\n\nRequired: Yes  \nType: Array  \nUpdate requires: No interruption"
        },
        "Name": {
          "description": "The name of the stage.",
          "type": "string",
          "markdownDescription": "The name of the stage.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "OnFailure": {
          "type": "object",
          "description": "The method to use when a stage has not completed successfully",
          "$ref": "#/definitions/FailureConditions",
          "markdownDescription": "The method to use when a stage has not completed successfully\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
        },
        "OnSuccess": {
          "type": "object",
          "description": "The method to use when a stage has completed successfully",
          "$ref": "#/definitions/SuccessConditions",
          "markdownDescription": "The method to use when a stage has completed successfully\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
        },
        "BeforeEntry": {
          "type": "object",
          "description": "The method to use before stage runs.",
          "$ref": "#/definitions/BeforeEntryConditions",
          "markdownDescription": "The method to use before stage runs.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Actions",
        "Name"
      ],
      "markdownDescription": "Represents information about a stage and its definition.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "InputArtifact": {
      "description": "Represents information about an artifact to be worked on, such as a test or build artifact.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "description": "The name of the artifact to be worked on (for example, \"My App\").",
          "type": "string",
          "markdownDescription": "The name of the artifact to be worked on (for example, \"My App\").\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Name"
      ],
      "markdownDescription": "Represents information about an artifact to be worked on, such as a test or build artifact.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "ArtifactStore": {
      "description": "The S3 bucket where artifacts for the pipeline are stored.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Type": {
          "description": "The type of the artifact store, such as S3.",
          "enum": [
            "S3"
          ],
          "type": "string",
          "markdownDescription": "The type of the artifact store, such as S3.\n\n---\n\nRequired: Yes  \nType: String  \nAllowed Values: S3  \nUpdate requires: No interruption"
        },
        "EncryptionKey": {
          "$ref": "#/definitions/EncryptionKey"
        },
        "Location": {
          "description": "The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.",
          "type": "string",
          "markdownDescription": "The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same AWS Region as the pipeline to store your pipeline artifacts.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Type",
        "Location"
      ],
      "markdownDescription": "The S3 bucket where artifacts for the pipeline are stored.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "VariableDeclaration": {
      "description": "A variable declared at the pipeline level.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "DefaultValue": {
          "description": "The value of a pipeline-level variable.",
          "type": "string",
          "markdownDescription": "The value of a pipeline-level variable.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Description": {
          "description": "The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.",
          "type": "string",
          "markdownDescription": "The description of a pipeline-level variable. It's used to add additional context about the variable, and not being used at time when pipeline executes.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Name": {
          "description": "The name of a pipeline-level variable.",
          "type": "string",
          "markdownDescription": "The name of a pipeline-level variable.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Name"
      ],
      "markdownDescription": "A variable declared at the pipeline level.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "StageTransition": {
      "description": "The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "StageName": {
          "description": "The name of the stage where you want to disable the inbound or outbound transition of artifacts.",
          "type": "string",
          "markdownDescription": "The name of the stage where you want to disable the inbound or outbound transition of artifacts.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Reason": {
          "description": "The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.",
          "type": "string",
          "markdownDescription": "The reason given to the user that a stage is disabled, such as waiting for manual approval or manual tests. This message is displayed in the pipeline console UI.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "StageName",
        "Reason"
      ],
      "markdownDescription": "The name of the pipeline in which you want to disable the flow of artifacts from one stage to another.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitTagFilterCriteria": {
      "description": "The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Includes": {
          "description": "The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Excludes": {
          "description": "The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The Git tags specified as filter criteria for whether a Git tag repository event will start the pipeline.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "Tag": {
      "description": "A tag is a key-value pair that is used to manage the resource.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Value": {
          "description": "The tag's value.",
          "type": "string",
          "markdownDescription": "The tag's value.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        },
        "Key": {
          "description": "The tag's key.",
          "type": "string",
          "markdownDescription": "The tag's key.\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Value",
        "Key"
      ],
      "markdownDescription": "A tag is a key-value pair that is used to manage the resource.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "GitBranchFilterCriteria": {
      "description": "The Git repository branches specified as filter criteria to start the pipeline.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Includes": {
          "description": "The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git branches that, when a commit is pushed, are to be included as criteria that starts the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Excludes": {
          "description": "The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.",
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "markdownDescription": "\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
          },
          "markdownDescription": "The list of patterns of Git branches that, when a commit is pushed, are to be excluded from starting the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The Git repository branches specified as filter criteria to start the pipeline.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "OutputArtifact": {
      "description": "Represents information about the output of an action.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Name": {
          "description": "The name of the output of an artifact, such as \"My App\".",
          "type": "string",
          "markdownDescription": "The name of the output of an artifact, such as \"My App\".\n\n---\n\nRequired: Yes  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "required": [
        "Name"
      ],
      "markdownDescription": "Represents information about the output of an action.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "FailureConditions": {
      "description": "The configuration that specifies the result, such as rollback, to occur upon stage failure",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Result": {
          "type": "string",
          "description": "The specified result for when the failure conditions are met, such as rolling back the stage",
          "enum": [
            "ROLLBACK"
          ],
          "markdownDescription": "The specified result for when the failure conditions are met, such as rolling back the stage\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: ROLLBACK  \nUpdate requires: No interruption"
        },
        "Conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The configuration that specifies the result, such as rollback, to occur upon stage failure\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "SuccessConditions": {
      "description": "The configuration that specifies the result, such as rollback, to occur upon stage failure",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The configuration that specifies the result, such as rollback, to occur upon stage failure\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "BeforeEntryConditions": {
      "description": "The configuration that specifies the rules to run before stage starts.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Condition"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "The configuration that specifies the rules to run before stage starts.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "Condition": {
      "description": "Represents information about condition.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Result": {
          "type": "string",
          "description": "The specified result for when the failure conditions are met, such as rolling back the stage",
          "markdownDescription": "The specified result for when the failure conditions are met, such as rolling back the stage\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Rules": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/RuleDeclaration"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "Represents information about condition.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "RuleDeclaration": {
      "description": "Represents information about condition.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RuleTypeId": {
          "$ref": "#/definitions/RuleTypeId"
        },
        "Configuration": {
          "description": "The rule's configuration. These are key-value pairs that specify input values for a rule.",
          "type": "object",
          "markdownDescription": "The rule's configuration. These are key-value pairs that specify input values for a rule.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
        },
        "InputArtifacts": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/InputArtifact"
          },
          "markdownDescription": "\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
        },
        "Region": {
          "description": "The rule declaration's AWS Region, such as us-east-1.",
          "type": "string",
          "markdownDescription": "The rule declaration's AWS Region, such as us-east-1.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "RoleArn": {
          "description": "The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.",
          "type": "string",
          "markdownDescription": "The ARN of the IAM service role that performs the declared rule. This is assumed through the roleArn for the pipeline.\n\n---\n\nRequired: No  \nType: String  \nPattern: arn:aws(-[\\w]+)*:iam::[0-9]{12}:role/.*  \nUpdate requires: No interruption"
        },
        "Name": {
          "description": "The rule declaration's name.",
          "type": "string",
          "markdownDescription": "The rule declaration's name.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "Represents information about condition.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    },
    "RuleTypeId": {
      "description": "Represents information about a rule type.",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Owner": {
          "description": "The creator of the rule being called. Only AWS is supported.",
          "type": "string",
          "markdownDescription": "The creator of the rule being called. Only AWS is supported.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Category": {
          "description": "A category for the provider type for the rule.",
          "type": "string",
          "markdownDescription": "A category for the provider type for the rule.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Version": {
          "description": "A string that describes the rule version.",
          "type": "string",
          "markdownDescription": "A string that describes the rule version.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        },
        "Provider": {
          "description": "The provider of the service being called by the rule.",
          "type": "string",
          "markdownDescription": "The provider of the service being called by the rule.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
        }
      },
      "markdownDescription": "Represents information about a rule type.\n\n---\n\nRequired: No  \nUpdate requires: No interruption"
    }
  },
  "properties": {
    "ArtifactStores": {
      "description": "A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/ArtifactStoreMap"
      },
      "markdownDescription": "A mapping of artifactStore objects and their corresponding AWS Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    },
    "DisableInboundStageTransitions": {
      "description": "Represents the input of a DisableStageTransition action.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/StageTransition"
      },
      "markdownDescription": "Represents the input of a DisableStageTransition action.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    },
    "Stages": {
      "description": "Represents information about a stage and its definition.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/StageDeclaration"
      },
      "markdownDescription": "Represents information about a stage and its definition.\n\n---\n\nRequired: Yes  \nType: Array  \nUpdate requires: No interruption"
    },
    "ExecutionMode": {
      "description": "The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.",
      "enum": [
        "QUEUED",
        "SUPERSEDED",
        "PARALLEL"
      ],
      "default": "SUPERSEDED",
      "type": "string",
      "markdownDescription": "The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: QUEUED | SUPERSEDED | PARALLEL  \nUpdate requires: No interruption"
    },
    "RestartExecutionOnUpdate": {
      "description": "Indicates whether to rerun the CodePipeline pipeline after you update it.",
      "type": "boolean",
      "markdownDescription": "Indicates whether to rerun the CodePipeline pipeline after you update it.\n\n---\n\nRequired: No  \nType: Boolean  \nUpdate requires: No interruption"
    },
    "Triggers": {
      "description": "The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/PipelineTriggerDeclaration"
      },
      "markdownDescription": "The trigger configuration specifying a type of event, such as Git tags, that starts the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    },
    "RoleArn": {
      "description": "The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn",
      "type": "string",
      "markdownDescription": "The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no actionRoleArn, or to use to assume roles for actions with an actionRoleArn\n\n---\n\nRequired: Yes  \nType: String  \nPattern: arn:aws(-[\\w]+)*:iam::[0-9]{12}:role/.*  \nUpdate requires: No interruption"
    },
    "Name": {
      "description": "The name of the pipeline.",
      "type": "string",
      "markdownDescription": "The name of the pipeline.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: Replacement"
    },
    "Variables": {
      "description": "A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\\-_]+.",
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/VariableDeclaration"
      },
      "markdownDescription": "A list that defines the pipeline variables for a pipeline resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9@\\-_]+.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    },
    "ArtifactStore": {
      "description": "The S3 bucket where artifacts for the pipeline are stored.",
      "$ref": "#/definitions/ArtifactStore",
      "markdownDescription": "The S3 bucket where artifacts for the pipeline are stored.\n\n---\n\nRequired: No  \nType:   \nUpdate requires: No interruption"
    },
    "PipelineType": {
      "description": "CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.",
      "type": "string",
      "enum": [
        "V1",
        "V2"
      ],
      "markdownDescription": "CodePipeline provides the following pipeline types, which differ in characteristics and price, so that you can tailor your pipeline features and cost to the needs of your applications.\n\n---\n\nRequired: No  \nType: String  \nAllowed Values: V1 | V2  \nUpdate requires: No interruption"
    },
    "Tags": {
      "description": "Specifies the tags applied to the pipeline.",
      "type": "array",
      "uniqueItems": false,
      "items": {
        "$ref": "#/definitions/Tag"
      },
      "markdownDescription": "Specifies the tags applied to the pipeline.\n\n---\n\nRequired: No  \nType: Array  \nUpdate requires: No interruption"
    }
  },
  "additionalProperties": false,
  "tagging": {
    "taggable": true,
    "tagOnCreate": true,
    "tagUpdatable": true,
    "cloudFormationSystemTags": false,
    "tagProperty": "/properties/Tags",
    "permissions": [
      "codepipeline:TagResource",
      "codepipeline:UntagResource"
    ]
  },
  "required": [
    "Stages",
    "RoleArn"
  ],
  "readOnlyProperties": [
    "/properties/Version"
  ],
  "primaryIdentifier": [
    "/properties/Name"
  ],
  "createOnlyProperties": [
    "/properties/Name"
  ],
  "writeOnlyProperties": [
    "/properties/RestartExecutionOnUpdate"
  ],
  "handlers": {
    "create": {
      "permissions": [
        "iam:GetRole",
        "iam:PassRole",
        "codepipeline:GetPipeline",
        "codepipeline:CreatePipeline",
        "codepipeline:DisableStageTransition",
        "codepipeline:GetPipelineState",
        "codepipeline:TagResource",
        "codestar-connections:PassConnection"
      ]
    },
    "read": {
      "permissions": [
        "codepipeline:GetPipeline",
        "codepipeline:ListTagsForResource",
        "codepipeline:GetPipelineState"
      ]
    },
    "update": {
      "permissions": [
        "iam:GetRole",
        "iam:PassRole",
        "codepipeline:EnableStageTransition",
        "codepipeline:StartPipelineExecution",
        "codepipeline:GetPipeline",
        "codepipeline:UpdatePipeline",
        "codepipeline:GetPipelineState",
        "codepipeline:DisableStageTransition",
        "codepipeline:TagResource",
        "codepipeline:UntagResource",
        "codestar-connections:PassConnection"
      ]
    },
    "delete": {
      "permissions": [
        "codepipeline:GetPipeline",
        "codepipeline:DeletePipeline"
      ]
    },
    "list": {
      "permissions": [
        "codepipeline:ListPipelines"
      ]
    }
  },
  "attributes": {
    "Version": {
      "description": "The version of the pipeline.",
      "type": "string",
      "markdownDescription": "The version of the pipeline.\n\n---\n\nRequired: No  \nType: String  \nUpdate requires: No interruption"
    }
  }
}